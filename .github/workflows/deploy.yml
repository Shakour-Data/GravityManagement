name: Deploy GravityPM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: gravitypm/backend:${{ github.sha }}, gravitypm/backend:latest
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: gravitypm/frontend:${{ github.sha }}, gravitypm/frontend:latest
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Update docker-compose.staging.yml with new image tags
        sed -i "s|gravitypm/backend:latest|gravitypm/backend:${{ github.sha }}|g" docker-compose.staging.yml
        sed -i "s|gravitypm/frontend:latest|gravitypm/frontend:${{ github.sha }}|g" docker-compose.staging.yml

        # Deploy to staging server (replace with actual staging server details)
        echo "Staging deployment commands would go here"
        echo "Example: scp docker-compose.staging.yml user@staging-server:/path/to/app/"
        echo "Example: ssh user@staging-server 'cd /path/to/app && docker-compose pull && docker-compose up -d'"

        # Health check
        echo "Performing health checks..."
        # curl -f http://staging-server/health || exit 1

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your production deployment commands here
        # For example: scp to production server, run deploy script
