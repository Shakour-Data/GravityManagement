AWSTemplateFormatVersion: '2010-09-09'
Description: 'Load Balancer Template for GravityPM Application'

Parameters:
  EnvironmentName:
    Type: String
    Default: gravitypm
    Description: Environment name for tagging

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the load balancer will be created

  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 1 ID

  PublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 2 ID

  WebSecurityGroupId:
    Type: String
    Description: Web Security Group ID

  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate for HTTPS

Resources:
  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref WebSecurityGroupId
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb
        - Key: Environment
          Value: !Ref EnvironmentName

  # Target Groups
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-frontend-tg
      Protocol: HTTP
      Port: 3000
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-frontend-tg

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-backend-tg
      Protocol: HTTP
      Port: 8000
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /docs
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-tg

  # Listeners
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  # Listener Rules
  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

Outputs:
  LoadBalancerArn:
    Description: Application Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${EnvironmentName}-alb-arn

  LoadBalancerDNSName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-alb-dns

  FrontendTargetGroupArn:
    Description: Frontend Target Group ARN
    Value: !Ref FrontendTargetGroup
    Export:
      Name: !Sub ${EnvironmentName}-frontend-tg-arn

  BackendTargetGroupArn:
    Description: Backend Target Group ARN
    Value: !Ref BackendTargetGroup
    Export:
      Name: !Sub ${EnvironmentName}-backend-tg-arn

  HTTPSListenerArn:
    Description: HTTPS Listener ARN
    Value: !Ref HTTPSListener
    Export:
      Name: !Sub ${EnvironmentName}-https-listener-arn
