name: Deploy GravityPM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: gravitypm/backend:${{ github.sha }}, gravitypm/backend:latest
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: gravitypm/frontend:${{ github.sha }}, gravitypm/frontend:latest
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Update docker-compose.staging.yml with new image tags
        sed -i "s|gravitypm/backend:latest|gravitypm/backend:${{ github.sha }}|g" docker-compose.staging.yml
        sed -i "s|gravitypm/frontend:latest|gravitypm/frontend:${{ github.sha }}|g" docker-compose.staging.yml

        # Deploy to staging server (replace with actual staging server details)
        echo "Staging deployment commands would go here"
        echo "Example: scp docker-compose.staging.yml user@staging-server:/path/to/app/"
        echo "Example: ssh user@staging-server 'cd /path/to/app && docker-compose pull && docker-compose up -d'"

        # Health check
        echo "Performing health checks..."
        # curl -f http://staging-server/health || exit 1

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    - name: Blue-Green Deployment to Production
      run: |
        echo "Starting blue-green deployment to production..."

        # Determine which environment is currently active (blue or green)
        CURRENT_ENV=$(curl -s http://production-server/current-env || echo "blue")
        if [ "$CURRENT_ENV" = "blue" ]; then
          TARGET_ENV="green"
          ROLLBACK_ENV="blue"
        else
          TARGET_ENV="blue"
          ROLLBACK_ENV="green"
        fi

        echo "Deploying to $TARGET_ENV environment..."

        # Update docker-compose.prod.yml with new image tags
        sed -i "s|gravitypm/backend:latest|gravitypm/backend:${{ github.sha }}|g" docker-compose.prod.yml
        sed -i "s|gravitypm/frontend:latest|gravitypm/frontend:${{ github.sha }}|g" docker-compose.prod.yml

        # Deploy to target environment
        echo "Deploying to production $TARGET_ENV..."
        # scp docker-compose.prod.yml user@production-server:/path/to/app/$TARGET_ENV/
        # ssh user@production-server "cd /path/to/app/$TARGET_ENV && docker-compose pull && docker-compose up -d"

        # Health check
        echo "Performing health checks on $TARGET_ENV..."
        # for i in {1..30}; do
        #   if curl -f http://production-server-$TARGET_ENV/health; then
        #     echo "Health check passed"
        #     break
        #   fi
        #   sleep 10
        # done

        # Switch traffic to new environment
        echo "Switching traffic to $TARGET_ENV..."
        # Update load balancer or nginx config to point to new environment
        # ssh user@production-server "nginx -s reload"

        # Wait for traffic to stabilize
        sleep 30

        # Final health check
        # if ! curl -f http://production-server/health; then
        #   echo "Production health check failed, initiating rollback..."
        #   # Rollback procedure
        #   exit 1
        # fi

        # Update current environment marker
        # echo "$TARGET_ENV" > /tmp/current_env
        # scp /tmp/current_env user@production-server:/path/to/app/

        echo "Production deployment completed successfully"

    - name: Rollback on Failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        # Rollback to previous environment
        # ssh user@production-server "nginx -s reload"  # Switch back to previous env
        # Optionally scale down the failed environment
        # ssh user@production-server "cd /path/to/app/$TARGET_ENV && docker-compose down"

    - name: Deployment Notification
      if: always()
      run: |
        if [ ${{ job.status }} = "success" ]; then
          echo "✅ Production deployment successful"
          # Send success notification
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"Production deployment successful"}' ${{ secrets.SLACK_WEBHOOK }}
        else
          echo "❌ Production deployment failed"
          # Send failure notification
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"Production deployment failed"}' ${{ secrets.SLACK_WEBHOOK }}
        fi
