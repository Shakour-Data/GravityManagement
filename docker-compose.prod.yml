version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: gravitypm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/app/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - gravitypm

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gravitypm-backend
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    networks:
      - gravitypm

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gravitypm-frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - ENVIRONMENT=production
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    networks:
      - gravitypm

  redis:
    image: redis:alpine
    container_name: gravitypm-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - gravitypm

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: gravitypm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gravitypm

  grafana:
    image: grafana/grafana:latest
    container_name: gravitypm-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - gravitypm

  node-exporter:
    image: prom/node-exporter:latest
    container_name: gravitypm-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - gravitypm

  # ELK stack for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: gravitypm-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - gravitypm

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: gravitypm-logstash
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./monitoring/logstash.yml:/usr/share/logstash/config/logstash.yml
    depends_on:
      - elasticsearch
    networks:
      - gravitypm

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: gravitypm-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - gravitypm

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  gravitypm:
    driver: bridge
