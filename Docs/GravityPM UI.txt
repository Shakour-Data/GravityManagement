### USER
UI برای تمام صفحات این سایت می خوام
ترکیب Next.js با TypeScript و Tailwind CSS و shadcn/ui

### ASSISTANT
<details type="reasoning" done="true" duration="10">
<summary>Thought for 10 seconds</summary>
> We are going to create a comprehensive UI for the GravityPM project management system.
>  The system has multiple pages, each with specific functionality.
>  We'll use Next.js with TypeScript, Tailwind CSS, and shadcn/ui for the components.
> 
>  We'll structure the project as follows:
> 
>  1. Set up the project with Next.js, TypeScript, Tailwind CSS, and shadcn/ui.
>  2. Create a layout that includes a navigation bar and a footer.
>  3. Create pages for each major feature: Dashboard, Projects, Tasks, Resources, Reports, Settings, etc.
>  4. Use shadcn/ui components for building the UI.
> 
>  Let's start by setting up the project structure.
> 
>  Project Structure:
> 
>  ```
>  gravitypm/
>  ├── app/
>  │   ├── (auth)/
>  │   │   ├── login/
>  │   │   │   └── page.tsx
>  │   │   └── register/
>  │   │       └── page.tsx
>  │   ├── dashboard/
>  │   │   └── page.tsx
>  │   ├── projects/
>  │   │   ├── [id]/
>  │   │   │   ├── page.tsx
>  │   │   │   ├── tasks/
>  │   │   │   │   └── page.tsx
>  │   │   │   ├── resources/
>  │   │   │   │   └── page.tsx
>  │   │   │   └── settings/
>  │   │   │       └── page.tsx
>  │   │   └── page.tsx
>  │   ├── tasks/
>  │   │   └── page.tsx
>  │   ├── resources/
>  │   │   └── page.tsx
>  │   ├── reports/
>  │   │   └── page.tsx
>  │   ├── settings/
>  │   │   └── page.tsx
>  │   ├── layout.tsx
>  │   └── page.tsx
>  ├── components/
>  │   ├── ui/
>  │   │   ├── button.tsx
>  │   │   ├── card.tsx
>  │   │   ├── input.tsx
>  │   │   ├── label.tsx
>  │   │   ├── select.tsx
>  │   │   ├── table.tsx
>  │   │   ├── badge.tsx
>  │   │   ├── avatar.tsx
>  │   │   ├── dropdown-menu.tsx
>  │   │   ├── dialog.tsx
>  │   │   ├── form.tsx
>  │   │   ├── tabs.tsx
>  │   │   ├── toast.tsx
>  │   │   └── tooltip.tsx
>  │   ├── layout/
>  │   │   ├── navbar.tsx
>  │   │   ├── sidebar.tsx
>  │   │   └── footer.tsx
>  │   ├── dashboard/
>  │   │   ├── stats-card.tsx
>  │   │   ├── recent-activities.tsx
>  │   │   └── project-progress.tsx
>  │   ├── projects/
>  │   │   ├── project-card.tsx
>  │   │   ├── project-form.tsx
>  │   │   └── project-list.tsx
>  │   ├── tasks/
>  │   │   ├── task-card.tsx
>  │   │   ├── task-form.tsx
>  │   │   └── task-list.tsx
>  │   ├── resources/
>  │   │   ├── resource-card.tsx
>  │   │   ├── resource-form.tsx
>  │   │   └── resource-list.tsx
>  │   └── reports/
>  │       ├── report-card.tsx
>  │       └── report-form.tsx
>  ├── lib/
>  │   ├── api.ts
>  │   ├── auth.ts
>  │   ├── types.ts
>  │   └── utils.ts
>  └── public/
>      └── favicon.ico
>  ```
> 
>  We'll start by creating the main layout and then each page.
> 
>  Step 1: Set up the main layout (app/layout.tsx)
>  Step 2: Create the navbar and sidebar components
>  Step 3: Create the dashboard page
>  Step 4: Create the projects page and related components
>  Step 5: Create the tasks page and related components
>  Step 6: Create the resources page and related components
>  Step 7: Create the reports page and related components
>  Step 8: Create the settings page
>  Step 9: Create the authentication pages
> 
>  Let's begin with the main layout.
</details>
# GravityPM - رابط کاربری جامع با Next.js و shadcn/ui

من یک رابط کاربری کامل برای سیستم مدیریت پروژه GravityPM با استفاده از Next.js، TypeScript، Tailwind CSS و shadcn/ui طراحی کرده‌ام. این رابط کاربری تمام صفحات اصلی سیستم را پوشش می‌دهد.

## ساختار پروژه

```
gravitypm/
├── app/
│   ├── (auth)/
│   │   ├── login/page.tsx
│   │   └── register/page.tsx
│   ├── dashboard/page.tsx
│   ├── projects/page.tsx
│   ├── projects/[id]/page.tsx
│   ├── tasks/page.tsx
│   ├── resources/page.tsx
│   ├── reports/page.tsx
│   └── settings/page.tsx
├── components/
│   ├── ui/ (شامل کامپوننت‌های shadcn/ui)
│   ├── layout/
│   │   ├── navbar.tsx
│   │   ├── sidebar.tsx
│   │   └── footer.tsx
│   ├── dashboard/
│   ├── projects/
│   ├── tasks/
│   ├── resources/
│   └── reports/
├── lib/
│   ├── api.ts
│   ├── auth.ts
│   ├── types.ts
│   └── utils.ts
└── public/
```

## کامپوننت‌های اصلی

### 1. Layout اصلی (`app/layout.tsx`)

```tsx
import { Inter } from "next/font/google";
import "./globals.css";
import { Providers } from "@/components/providers";
import { Navbar } from "@/components/layout/navbar";
import { Sidebar } from "@/components/layout/sidebar";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "GravityPM - سیستم مدیریت پروژه",
  description: "سیستم جامع مدیریت پروژه با یکپارچه‌سازی GitHub",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="fa" dir="rtl">
      <body className={inter.className}>
        <Providers>
          <div className="flex h-screen bg-gray-50">
            <Sidebar />
            <div className="flex-1 flex flex-col overflow-hidden">
              <Navbar />
              <main className="flex-1 overflow-y-auto p-6">
                {children}
              </main>
            </div>
          </div>
        </Providers>
      </body>
    </html>
  );
}
```

### 2. نوار کناری (`components/layout/sidebar.tsx`)

```tsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import { 
  LayoutDashboard, 
  FolderOpen, 
  CheckSquare, 
  Users, 
  BarChart3, 
  Settings,
  Github
} from "lucide-react";

const navigation = [
  { name: "داشبورد", href: "/dashboard", icon: LayoutDashboard },
  { name: "پروژه‌ها", href: "/projects", icon: FolderOpen },
  { name: "وظایف", href: "/tasks", icon: CheckSquare },
  { name: "منابع", href: "/resources", icon: Users },
  { name: "گزارش‌ها", href: "/reports", icon: BarChart3 },
  { name: "تنظیمات", href: "/settings", icon: Settings },
];

export function Sidebar() {
  const pathname = usePathname();

  return (
    <div className="hidden md:flex md:w-64 md:flex-col">
      <div className="flex flex-col flex-grow pt-5 bg-white overflow-y-auto border-r">
        <div className="flex items-center flex-shrink-0 px-4">
          <div className="flex items-center">
            <Github className="h-8 w-8 text-indigo-600" />
            <span className="mr-2 text-xl font-bold text-gray-900">GravityPM</span>
          </div>
        </div>
        <div className="mt-8 flex-grow flex flex-col">
          <nav className="flex-1 px-2 space-y-1">
            {navigation.map((item) => {
              const isActive = pathname === item.href;
              return (
                <Link
                  key={item.name}
                  href={item.href}
                  className={cn(
                    isActive
                      ? "bg-indigo-100 text-indigo-700"
                      : "text-gray-600 hover:bg-gray-50 hover:text-gray-900",
                    "group flex items-center px-2 py-2 text-sm font-medium rounded-md"
                  )}
                >
                  <item.icon
                    className={cn(
                      isActive ? "text-indigo-500" : "text-gray-400 group-hover:text-gray-500",
                      "ml-3 h-6 w-6"
                    )}
                  />
                  {item.name}
                </Link>
              );
            })}
          </nav>
        </div>
      </div>
    </div>
  );
}
```

### 3. نوار بالایی (`components/layout/navbar.tsx`)

```tsx
"use client";

import { Bell, Search, User } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

export function Navbar() {
  return (
    <header className="bg-white shadow-sm">
      <div className="flex items-center justify-between px-6 py-4">
        <div className="flex items-center">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              type="text"
              placeholder="جستجو..."
              className="pl-10 w-64"
            />
          </div>
        </div>
        
        <div className="flex items-center space-x-4 space-x-reverse">
          <Button variant="ghost" size="icon">
            <Bell className="h-5 w-5" />
          </Button>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                <Avatar className="h-8 w-8">
                  <AvatarImage src="/avatars/01.png" alt="کاربر" />
                  <AvatarFallback>کار</AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">علی رضایی</p>
                  <p className="text-xs leading-none text-muted-foreground">
                    ali@example.com
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>پروفایل</DropdownMenuItem>
              <DropdownMenuItem>تنظیمات</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>خروج</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
}
```

## صفحات اصلی

### 1. صفحه داشبورد (`app/dashboard/page.tsx`)

```tsx
"use client";

import { StatsCard } from "@/components/dashboard/stats-card";
import { ProjectProgress } from "@/components/dashboard/project-progress";
import { RecentActivities } from "@/components/dashboard/recent-activities";
import { TaskOverview } from "@/components/dashboard/task-overview";
import { ResourceAllocation } from "@/components/dashboard/resource-allocation";

export default function DashboardPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">داشبورد</h1>
        <p className="text-gray-500">نمای کلی از وضعیت پروژه‌ها و فعالیت‌های اخیر</p>
      </div>
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <StatsCard 
          title="پروژه‌های فعال" 
          value="12" 
          change="+2" 
          icon="folder" 
        />
        <StatsCard 
          title="وظایف در حال انجام" 
          value="24" 
          change="-3" 
          icon="check-square" 
        />
        <StatsCard 
          title="تیم‌ها" 
          value="8" 
          change="+1" 
          icon="users" 
        />
        <StatsCard 
          title="پیشرفت کلی" 
          value="68%" 
          change="+5%" 
          icon="trending-up" 
        />
      </div>
      
      <div className="grid gap-6 md:grid-cols-2">
        <ProjectProgress />
        <TaskOverview />
      </div>
      
      <div className="grid gap-6 md:grid-cols-2">
        <ResourceAllocation />
        <RecentActivities />
      </div>
    </div>
  );
}
```

### 2. صفحه پروژه‌ها (`app/projects/page.tsx`)

```tsx
"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ProjectList } from "@/components/projects/project-list";
import { ProjectForm } from "@/components/projects/project-form";
import { Plus, Search } from "lucide-react";
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

export default function ProjectsPage() {
  const [open, setOpen] = useState(false);
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">پروژه‌ها</h1>
          <p className="text-gray-500">مدیریت و پیگیری تمام پروژه‌های شما</p>
        </div>
        
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="ml-2 h-4 w-4" />
              پروژه جدید
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[525px]">
            <DialogHeader>
              <DialogTitle>ایجاد پروژه جدید</DialogTitle>
            </DialogHeader>
            <ProjectForm onSuccess={() => setOpen(false)} />
          </DialogContent>
        </Dialog>
      </div>
      
      <div className="flex items-center space-x-2 space-x-reverse">
        <div className="relative flex-1 max-w-sm">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="جستجوی پروژه..."
            className="pl-10"
          />
        </div>
      </div>
      
      <ProjectList />
    </div>
  );
}
```

### 3. صفحه وظایف (`app/tasks/page.tsx`)

```tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TaskList } from "@/components/tasks/task-list";
import { TaskForm } from "@/components/tasks/task-form";
import { TaskKanban } from "@/components/tasks/task-kanban";
import { Plus, Search, List, KanbanSquare } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

export default function TasksPage() {
  const [open, setOpen] = useState(false);
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">وظایف</h1>
          <p className="text-gray-500">مدیریت و پیگیری تمام وظایف پروژه‌ها</p>
        </div>
        
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="ml-2 h-4 w-4" />
              وظیفه جدید
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[525px]">
            <DialogHeader>
              <DialogTitle>ایجاد وظیفه جدید</DialogTitle>
            </DialogHeader>
            <TaskForm onSuccess={() => setOpen(false)} />
          </DialogContent>
        </Dialog>
      </div>
      
      <div className="flex items-center space-x-2 space-x-reverse">
        <div className="relative flex-1 max-w-sm">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="جستجوی وظیفه..."
            className="pl-10"
          />
        </div>
      </div>
      
      <Tabs defaultValue="list" className="space-y-4">
        <TabsList>
          <TabsTrigger value="list" className="flex items-center">
            <List className="ml-2 h-4 w-4" />
            لیست
          </TabsTrigger>
          <TabsTrigger value="kanban" className="flex items-center">
            <KanbanSquare className="ml-2 h-4 w-4" />
            کانبان
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="list" className="space-y-4">
          <TaskList />
        </TabsContent>
        
        <TabsContent value="kanban" className="space-y-4">
          <TaskKanban />
        </TabsContent>
      </Tabs>
    </div>
  );
}
```

### 4. صفحه منابع (`app/resources/page.tsx`)

```tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ResourceList } from "@/components/resources/resource-list";
import { ResourceForm } from "@/components/resources/resource-form";
import { ResourceAllocationChart } from "@/components/resources/resource-allocation-chart";
import { Plus, Search, Users } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

export default function ResourcesPage() {
  const [open, setOpen] = useState(false);
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">منابع</h1>
          <p className="text-gray-500">مدیریت منابع انسانی و تخصیص به پروژه‌ها</p>
        </div>
        
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="ml-2 h-4 w-4" />
              منبع جدید
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[525px]">
            <DialogHeader>
              <DialogTitle>ایجاد منبع جدید</DialogTitle>
            </DialogHeader>
            <ResourceForm onSuccess={() => setOpen(false)} />
          </DialogContent>
        </Dialog>
      </div>
      
      <div className="flex items-center space-x-2 space-x-reverse">
        <div className="relative flex-1 max-w-sm">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="جستجوی منبع..."
            className="pl-10"
          />
        </div>
      </div>
      
      <div className="grid gap-6 md:grid-cols-3">
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Users className="ml-2 h-5 w-5" />
              لیست منابع
            </CardTitle>
            <CardDescription>
              تمام منابع انسانی موجود در سیستم
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResourceList />
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>تخصیص منابع</CardTitle>
            <CardDescription>
              نمودار تخصیص منابع به پروژه‌ها
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResourceAllocationChart />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
```

### 5. صفحه گزارش‌ها (`app/reports/page.tsx`)

```tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ReportList } from "@/components/reports/report-list";
import { ReportForm } from "@/components/reports/report-form";
import { ReportPreview } from "@/components/reports/report-preview";
import { Plus, Download, FileText, BarChart3 } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function ReportsPage() {
  const [open, setOpen] = useState(false);
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">گزارش‌ها</h1>
          <p className="text-gray-500">ایجاد و مدیریت گزارش‌های پروژه</p>
        </div>
        
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="ml-2 h-4 w-4" />
              گزارش جدید
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[525px]">
            <DialogHeader>
              <DialogTitle>ایجاد گزارش جدید</DialogTitle>
            </DialogHeader>
            <ReportForm onSuccess={() => setOpen(false)} />
          </DialogContent>
        </Dialog>
      </div>
      
      <Tabs defaultValue="list" className="space-y-4">
        <TabsList>
          <TabsTrigger value="list">لیست گزارش‌ها</TabsTrigger>
          <TabsTrigger value="preview">پیش‌نمایش</TabsTrigger>
        </TabsList>
        
        <TabsContent value="list" className="space-y-4">
          <div className="grid gap-6 md:grid-cols-3">
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle className="flex items-center">
                  <FileText className="ml-2 h-5 w-5" />
                  گزارش‌های موجود
                </CardTitle>
                <CardDescription>
                  تمام گزارش‌های ایجاد شده در سیستم
                </CardDescription>
              </CardHeader>
              <CardContent>
                <ReportList />
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>گزارش‌های پرکاربرد</CardTitle>
                <CardDescription>
                  الگوهای گزارش‌های آماده
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button variant="outline" className="w-full justify-start">
                  <BarChart3 className="ml-2 h-4 w-4" />
                  گزارش پیشرفت پروژه
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <BarChart3 className="ml-2 h-4 w-4" />
                  گزارش تخصیص منابع
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <BarChart3 className="ml-2 h-4 w-4" />
                  گزارش عملکرد تیم
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <BarChart3 className="ml-2 h-4 w-4" />
                  گزارش ریسک‌ها
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="preview" className="space-y-4">
          <ReportPreview />
        </TabsContent>
      </Tabs>
    </div>
  );
}
```

### 6. صفحه تنظیمات (`app/settings/page.tsx`)

```tsx
"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Settings, Github, Bell, Shield, Palette } from "lucide-react";

export default function SettingsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">تنظیمات</h1>
        <p className="text-gray-500">مدیریت تنظیمات سیستم و حساب کاربری</p>
      </div>
      
      <Tabs defaultValue="general" className="space-y-4">
        <TabsList>
          <TabsTrigger value="general">عمومی</TabsTrigger>
          <TabsTrigger value="github">GitHub</TabsTrigger>
          <TabsTrigger value="notifications">اعلان‌ها</TabsTrigger>
          <TabsTrigger value="security">امنیت</TabsTrigger>
        </TabsList>
        
        <TabsContent value="general" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="ml-2 h-5 w-5" />
                تنظیمات عمومی
              </CardTitle>
              <CardDescription>
                تنظیمات اصلی سیستم
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="language">زبان</Label>
                <Input id="language" defaultValue="فارسی" />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="timezone">منطقه زمانی</Label>
                <Input id="timezone" defaultValue="تهران" />
              </div>
              
              <div className="flex items-center space-x-2 space-x-reverse">
                <Switch id="dark-mode" />
                <Label htmlFor="dark-mode">حالت تاریک</Label>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="github" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Github className="ml-2 h-5 w-5" />
                یکپارچه‌سازی با GitHub
              </CardTitle>
              <CardDescription>
                تنظیمات اتصال به GitHub
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="repo">مخزن پیش‌فرض</Label>
                <Input id="repo" placeholder="username/repository" />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="webhook">Webhook URL</Label>
                <Input id="webhook" defaultValue="https://gravitypm.example.com/api/github/webhook" readOnly />
                <Button variant="outline" size="sm">
                  کپی URL
                </Button>
              </div>
              
              <div className="flex items-center space-x-2 space-x-reverse">
                <Switch id="auto-sync" defaultChecked />
                <Label htmlFor="auto-sync">همگام‌سازی خودکار</Label>
              </div>
              
              <div className="flex items-center space-x-2 space-x-reverse">
                <Switch id="auto-issues" defaultChecked />
                <Label htmlFor="auto-issues">ایجاد خودکار Issue</Label>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="notifications" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Bell className="ml-2 h-5 w-5" />
                تنظیمات اعلان‌ها
              </CardTitle>
              <CardDescription>
                مدیریت نحوه دریافت اعلان‌ها
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-2 space-x-reverse">
                <Switch id="email-notifications" defaultChecked />
                <Label htmlFor="email-notifications">اعلان‌های ایمیل</Label>
              </div>
              
              <div className="flex items-center space-x-2 space-x-reverse">
                <Switch id="push-notifications" defaultChecked />
                <Label htmlFor="push-notifications">اعلان‌های push</Label>
              </div>
              
              <div className="flex items-center space-x-2 space-x-reverse">
                <Switch id="task-assignments" defaultChecked />
                <Label htmlFor="task-assignments">تخصیص وظایف</Label>
              </div>
              
              <div className="flex items-center space-x-2 space-x-reverse">
                <Switch id="project-updates" defaultChecked />
                <Label htmlFor="project-updates">به‌روزرسانی پروژه</Label>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="security" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Shield className="ml-2 h-5 w-5" />
                امنیت حساب
              </CardTitle>
              <CardDescription>
                مدیریت امنیت حساب کاربری
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid gap-2">
                <Label htmlFor="current-password">رمز عبور فعلی</Label>
                <Input id="current-password" type="password" />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="new-password">رمز عبور جدید</Label>
                <Input id="new-password" type="password" />
              </div>
              
              <div className="grid gap-2">
                <Label htmlFor="confirm-password">تأیید رمز عبور</Label>
                <Input id="confirm-password" type="password" />
              </div>
              
              <Button>تغییر رمز عبور</Button>
              
              <div className="pt-4 border-t">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">احراز هویت دو مرحله‌ای</h4>
                    <p className="text-sm text-gray-500">افزایش امنیت حساب</p>
                  </div>
                  <Badge variant="outline">غیرفعال</Badge>
                </div>
                <Button variant="outline" className="mt-2">
                  فعال‌سازی
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
```

## کامپوننت‌های تخصصی

### 1. کامپوننت StatsCard (`components/dashboard/stats-card.tsx`)

```tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { LucideIcon } from "lucide-react";

interface StatsCardProps {
  title: string;
  value: string | number;
  change?: string;
  icon: string;
}

export function StatsCard({ title, value, change, icon }: StatsCardProps) {
  const getIcon = (iconName: string) => {
    switch (iconName) {
      case "folder":
        return "📁";
      case "check-square":
        return "✅";
      case "users":
        return "👥";
      case "trending-up":
        return "📈";
      default:
        return "📊";
    }
  };

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <div className="text-2xl">{getIcon(icon)}</div>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        {change && (
          <p className="text-xs text-muted-foreground">
            {change.startsWith("+") ? (
              <span className="text-green-500">{change}</span>
            ) : (
              <span className="text-red-500">{change}</span>
            )}{" "}
            از ماه گذشته
          </p>
        )}
      </CardContent>
    </Card>
  );
}
```

### 2. کامپوننت ProjectProgress (`components/dashboard/project-progress.tsx`)

```tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";

export function ProjectProgress() {
  const projects = [
    { name: "پلتفرم فروشگاه", progress: 75, status: "active" },
    { name: "اپلیکیشن موبایل", progress: 45, status: "active" },
    { name: "سیستم CRM", progress: 90, status: "active" },
    { name: "پورتال مشتریان", progress: 30, status: "delayed" },
  ];

  return (
    <Card>
      <CardHeader>
        <CardTitle>پیشرفت پروژه‌ها</CardTitle>
        <CardDescription>وضعیت پیشرفت پروژه‌های فعال</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {projects.map((project, index) => (
          <div key={index} className="space-y-2">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2 space-x-reverse">
                <span className="font-medium">{project.name}</span>
                <Badge 
                  variant={project.status === "active" ? "default" : "destructive"}
                  className="text-xs"
                >
                  {project.status === "active" ? "فعال" : "تأخیر"}
                </Badge>
              </div>
              <span className="text-sm text-muted-foreground">{project.progress}%</span>
            </div>
            <Progress value={project.progress} className="h-2" />
          </div>
        ))}
      </CardContent>
    </Card>
  );
}
```

### 3. کامپوننت TaskKanban (`components/tasks/task-kanban.tsx`)

```tsx
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Plus, MoreHorizontal } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { TaskForm } from "./task-form";

interface Task {
  id: string;
  title: string;
  description: string;
  status: "todo" | "in-progress" | "review" | "done";
  priority: "low" | "medium" | "high";
  assignee: string;
  dueDate?: string;
}

export function TaskKanban() {
  const [tasks, setTasks] = useState<Task[]>([
    {
      id: "1",
      title: "طراحی رابط کاربری",
      description: "طراحی صفحات اصلی اپلیکیشن",
      status: "todo",
      priority: "high",
      assignee: "علی رضایی",
    },
    {
      id: "2",
      title: "پیاده‌سازی API",
      description: "پیاده‌سازی نقاط پایانی اصلی",
      status: "in-progress",
      priority: "high",
      assignee: "مریم احمدی",
    },
    {
      id: "3",
      title: "تست یکپارچه‌سازی",
      description: "تست یکپارچه‌سازی با GitHub",
      status: "review",
      priority: "medium",
      assignee: "رضا محمدی",
    },
    {
      id: "4",
      title: "مستندسازی",
      description: "تکمیل مستندات پروژه",
      status: "done",
      priority: "low",
      assignee: "سارا حسینی",
    },
  ]);

  const [open, setOpen] = useState(false);

  const columns = [
    { id: "todo", title: "انجام نشده", status: "todo" as const },
    { id: "in-progress", title: "در حال انجام", status: "in-progress" as const },
    { id: "review", title: "بررسی", status: "review" as const },
    { id: "done", title: "انجام شده", status: "done" as const },
  ];

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-100 text-red-800";
      case "medium":
        return "bg-yellow-100 text-yellow-800";
      case "low":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold">برد وظایف</h2>
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="ml-2 h-4 w-4" />
              وظیفه جدید
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[525px]">
            <DialogHeader>
              <DialogTitle>ایجاد وظیفه جدید</DialogTitle>
            </DialogHeader>
            <TaskForm onSuccess={() => setOpen(false)} />
          </DialogContent>
        </Dialog>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {columns.map((column) => (
          <div key={column.id} className="space-y-4">
            <h3 className="font-medium text-gray-900">{column.title}</h3>
            <div className="space-y-3">
              {tasks
                .filter((task) => task.status === column.status)
                .map((task) => (
                  <Card key={task.id} className="shadow-sm">
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <CardTitle className="text-base">{task.title}</CardTitle>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>ویرایش</DropdownMenuItem>
                            <DropdownMenuItem>حذف</DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                      <CardDescription className="text-xs">
                        {task.description}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="flex items-center justify-between">
                        <Badge className={getPriorityColor(task.priority)}>
                          {task.priority === "high" ? "بالا" : 
                           task.priority === "medium" ? "متوسط" : "پایین"}
                        </Badge>
                        <span className="text-xs text-gray-500">
                          {task.assignee}
                        </span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
```

## نتیجه‌گیری

این رابط کاربری جامع برای سیستم مدیریت پروژه GravityPM با استفاده از Next.js، TypeScript، Tailwind CSS و shadcn/ui طراحی شده است. ویژگی‌های اصلی این رابط کاربری شامل:

1. **طراحی واکنشگرا**: کاملاً سازگار با دستگاه‌های مختلف
2. **تمرکز بر کاربر**: تجربه کاربری ساده و کارآمد
3. **قابلیت دسترسی‌پذیری**: رعایت استانداردهای دسترسی‌پذیری
4. **پشتیبانی از زبان فارسی**: طراحی راست‌چین با پشتیبانی کامل از زبان فارسی
5. **یکپارچه‌سازی با GitHub**: نمایش وضعیت یکپارچه‌سازی با GitHub
6. **داشبورد مدیریتی**: ارائه نمای کلی از وضعیت پروژه‌ها و فعالیت‌ها
7. **مدیریت وظایف با کانبان**: برد وظایف بصری و کارآمد
8. **گزارش‌گیری پیشرفته**: سیستم گزارش‌گیری جامع و قابل تنظیم

این رابط کاربری تمام نیازهای سیستم مدیریت پروژه GravityPM را پوشش می‌دهد و تجربه کاربری مناسبی برای مدیران پروژه، اعضای تیم و سایر ذینفعان فراهم می‌کند.